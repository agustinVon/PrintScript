/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package PrintScript
import interpreter.InterpreterImpl
import lexer.LexerImpl
import parser.ParserImpl
import parser.exceptions.{ExpectedEndOfLineException, ExpressionExpectedException}
import sources.StringProgramSource

import scala.annotation.tailrec
import scala.io.{BufferedSource, Source}
import scala.util.{Failure, Success, Using}

object App {
  def main(args: Array[String]): Unit = {
    displayIntro(println)
    val content: String = displayPathOption(println)
    val source = StringProgramSource(content)
    val option:Int = displayMenu(println)

    val lexer = LexerImpl()
    val parser = ParserImpl()
    val interpreter = InterpreterImpl()

    if (option == 1) {
      val tokens = lexer.lex(source)
      try{
        val ast = parser.parse(source, tokens)
        interpreter.interpret(ast)
      } catch {
        case e:ExpectedEndOfLineException =>
          println("ERROR\ncolumn: " + e.position + " line: " + e.line)
          println(e.getMessage)
        case e:ExpressionExpectedException =>
          println("ERROR\ncolumn: " + e.position + " line: " + e.line)
          println(e.getMessage)
      }
    }

    if(option == 2) {
      val tokens = lexer.lex(source)
      val ast = parser.parse(source, tokens)
      interpreter.validate(ast)
    }
  }

  def displayIntro(displayMethod:(String) => Unit): Unit = {
    displayMethod(" _____      _       _    _____           _       _   ")
    displayMethod("|  __ \\    (_)     | |  / ____|         (_)     | |  ")
    displayMethod("| |__) | __ _ _ __ | |_| (___   ___ _ __ _ _ __ | |_ ")
    displayMethod("|  ___/ '__| | '_ \\| __|\\___ \\ / __| '__| | '_ \\| __|")
    displayMethod("| |   | |  | | | | | |_ ____) | (__| |  | | |_) | |_ ")
    displayMethod("|_|   |_|  |_|_| |_|\\__|_____/ \\___|_|  |_| .__/ \\__|")
    displayMethod("                                          | |        ")
    displayMethod("                                          |_|        ")
    displayMethod("")
    displayMethod("_____________________________________________________")
    displayMethod("")
    displayMethod("")
  }

  @tailrec
  def displayPathOption(displayMethod:(String) => Unit):String = {
    displayMethod("Path to file: ")
    displayMethod("")
    val path = scala.io.StdIn.readLine()
    Using(Source.fromFile(path)) { source => source.mkString } match {
      case Failure(exception) => {
        println(exception)
        displayPathOption(displayMethod)
      }
      case Success(value) => value
    }
  }

  def displayMenu(displayMethod:(String) => Unit): Int = {
    displayMethod("1. Interpret")
    displayMethod("2. Validate")
    displayMethod("")
    val option = scala.io.StdIn.readInt()
    if (option == 1 || option == 2) {
      option
    } else {
      displayMenu(displayMethod)
    }
  }

}
